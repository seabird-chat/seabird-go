// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.28.3
// source: common.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// When sent by a chat backend, the ID MAY optionally be used as a hint to the
// frontend to get the same external ID on reconnection. When sent by core to a
// plugin, the ID MUST be an ID pointing to an exact backend instance.
type Backend struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Backend) Reset() {
	*x = Backend{}
	mi := &file_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Backend) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Backend) ProtoMessage() {}

func (x *Backend) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Backend.ProtoReflect.Descriptor instead.
func (*Backend) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *Backend) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Backend) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// When sent by a chat backend, the ID MUST be unique across users in that running
// backend. Failure to follow this will result in incorrect information being
// sent to plugins. When sent by core to a plugin, the ID MUST be an ID pointing
// to an instance of a user on chat backend.
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

// When sent by a chat backend, the ID MUST be unique across channels in that
// running backend. Failure to follow this will result in incorrect information
// being sent to plugins. When sent by core to a plugin, the ID MUST be an ID
// pointing to an instance of a channel on chat backend.
type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Topic       string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	mi := &file_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

func (x *Channel) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Channel) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *Channel) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// ChannelSource represents where a message came from. Note that User is used
// rather than just an ID so any clients can have access to the name as well.
// This may change in the future.
type ChannelSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	User      *User  `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (x *ChannelSource) Reset() {
	*x = ChannelSource{}
	mi := &file_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelSource) ProtoMessage() {}

func (x *ChannelSource) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelSource.ProtoReflect.Descriptor instead.
func (*ChannelSource) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *ChannelSource) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChannelSource) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

// MessageEvent will be sent when a user sends a message to a channel.
//
// When ingesting, if blocks are provided, they will be used to re-hydrate the
// text string. If only text is provided, a new TextBlock with the text contents
// will be created.
//
// Clients can assume that both text and blocks will be provided for every
// message.
type MessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *ChannelSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Text   string         `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Blocks []*Block       `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *MessageEvent) Reset() {
	*x = MessageEvent{}
	mi := &file_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEvent) ProtoMessage() {}

func (x *MessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEvent.ProtoReflect.Descriptor instead.
func (*MessageEvent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *MessageEvent) GetSource() *ChannelSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MessageEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MessageEvent) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// PrivateMessageEvent will be sent when a user sends a message directly to the
// chat backend.
type PrivateMessageEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *User    `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Text   string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Blocks []*Block `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *PrivateMessageEvent) Reset() {
	*x = PrivateMessageEvent{}
	mi := &file_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateMessageEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateMessageEvent) ProtoMessage() {}

func (x *PrivateMessageEvent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateMessageEvent.ProtoReflect.Descriptor instead.
func (*PrivateMessageEvent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *PrivateMessageEvent) GetSource() *User {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PrivateMessageEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PrivateMessageEvent) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// MentionEvent will be sent when a user mentions the chat backend's user at the
// start of a message in a channel.
//
// This has been deprecated in favor of MessageEvents containing a MentionBlock.
type MentionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *ChannelSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Text   string         `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Blocks []*Block       `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *MentionEvent) Reset() {
	*x = MentionEvent{}
	mi := &file_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MentionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MentionEvent) ProtoMessage() {}

func (x *MentionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MentionEvent.ProtoReflect.Descriptor instead.
func (*MentionEvent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *MentionEvent) GetSource() *ChannelSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *MentionEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *MentionEvent) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// CommandEvent will be sent when a user issues a command in a channel. Commands
// cannot currently be issued via private message. If a message is parsed as a
// command, it MUST NOT be also sent as another message type.
type CommandEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source  *ChannelSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Command string         `protobuf:"bytes,2,opt,name=command,proto3" json:"command,omitempty"`
	Arg     string         `protobuf:"bytes,3,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *CommandEvent) Reset() {
	*x = CommandEvent{}
	mi := &file_common_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommandEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandEvent) ProtoMessage() {}

func (x *CommandEvent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandEvent.ProtoReflect.Descriptor instead.
func (*CommandEvent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{7}
}

func (x *CommandEvent) GetSource() *ChannelSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *CommandEvent) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *CommandEvent) GetArg() string {
	if x != nil {
		return x.Arg
	}
	return ""
}

// ActionEvent will be sent when a user takes an action in a channel. This is
// often triggered with /me.
type ActionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *ChannelSource `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Text   string         `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Blocks []*Block       `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *ActionEvent) Reset() {
	*x = ActionEvent{}
	mi := &file_common_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ActionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionEvent) ProtoMessage() {}

func (x *ActionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionEvent.ProtoReflect.Descriptor instead.
func (*ActionEvent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{8}
}

func (x *ActionEvent) GetSource() *ChannelSource {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *ActionEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *ActionEvent) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// PrivateActionEvent will be sent when a user takes an action in a private
// message. This is often triggered with /me.
type PrivateActionEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source *User    `protobuf:"bytes,1,opt,name=source,proto3" json:"source,omitempty"`
	Text   string   `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
	Blocks []*Block `protobuf:"bytes,3,rep,name=blocks,proto3" json:"blocks,omitempty"`
}

func (x *PrivateActionEvent) Reset() {
	*x = PrivateActionEvent{}
	mi := &file_common_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrivateActionEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrivateActionEvent) ProtoMessage() {}

func (x *PrivateActionEvent) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrivateActionEvent.ProtoReflect.Descriptor instead.
func (*PrivateActionEvent) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{9}
}

func (x *PrivateActionEvent) GetSource() *User {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *PrivateActionEvent) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *PrivateActionEvent) GetBlocks() []*Block {
	if x != nil {
		return x.Blocks
	}
	return nil
}

// Block defines the base message format. It is essentially a tree
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The parsed text with all formatting removed
	Plain string `protobuf:"bytes,1,opt,name=plain,proto3" json:"plain,omitempty"`
	// Types that are assignable to Inner:
	//
	//	*Block_Text
	//	*Block_Italics
	//	*Block_Bold
	//	*Block_Underline
	//	*Block_Strikethrough
	//	*Block_InlineCode
	//	*Block_FencedCode
	//	*Block_Spoiler
	//	*Block_List
	//	*Block_Link
	//	*Block_Blockquote
	//	*Block_Timestamp
	//	*Block_Container
	//	*Block_Heading
	Inner isBlock_Inner `protobuf_oneof:"inner"`
}

func (x *Block) Reset() {
	*x = Block{}
	mi := &file_common_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{10}
}

func (x *Block) GetPlain() string {
	if x != nil {
		return x.Plain
	}
	return ""
}

func (m *Block) GetInner() isBlock_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *Block) GetText() *TextBlock {
	if x, ok := x.GetInner().(*Block_Text); ok {
		return x.Text
	}
	return nil
}

func (x *Block) GetItalics() *ItalicsBlock {
	if x, ok := x.GetInner().(*Block_Italics); ok {
		return x.Italics
	}
	return nil
}

func (x *Block) GetBold() *BoldBlock {
	if x, ok := x.GetInner().(*Block_Bold); ok {
		return x.Bold
	}
	return nil
}

func (x *Block) GetUnderline() *UnderlineBlock {
	if x, ok := x.GetInner().(*Block_Underline); ok {
		return x.Underline
	}
	return nil
}

func (x *Block) GetStrikethrough() *StrikethroughBlock {
	if x, ok := x.GetInner().(*Block_Strikethrough); ok {
		return x.Strikethrough
	}
	return nil
}

func (x *Block) GetInlineCode() *InlineCodeBlock {
	if x, ok := x.GetInner().(*Block_InlineCode); ok {
		return x.InlineCode
	}
	return nil
}

func (x *Block) GetFencedCode() *FencedCodeBlock {
	if x, ok := x.GetInner().(*Block_FencedCode); ok {
		return x.FencedCode
	}
	return nil
}

func (x *Block) GetSpoiler() *SpoilerBlock {
	if x, ok := x.GetInner().(*Block_Spoiler); ok {
		return x.Spoiler
	}
	return nil
}

func (x *Block) GetList() *ListBlock {
	if x, ok := x.GetInner().(*Block_List); ok {
		return x.List
	}
	return nil
}

func (x *Block) GetLink() *LinkBlock {
	if x, ok := x.GetInner().(*Block_Link); ok {
		return x.Link
	}
	return nil
}

func (x *Block) GetBlockquote() *BlockquoteBlock {
	if x, ok := x.GetInner().(*Block_Blockquote); ok {
		return x.Blockquote
	}
	return nil
}

func (x *Block) GetTimestamp() *TimestampBlock {
	if x, ok := x.GetInner().(*Block_Timestamp); ok {
		return x.Timestamp
	}
	return nil
}

func (x *Block) GetContainer() *ContainerBlock {
	if x, ok := x.GetInner().(*Block_Container); ok {
		return x.Container
	}
	return nil
}

func (x *Block) GetHeading() *HeadingBlock {
	if x, ok := x.GetInner().(*Block_Heading); ok {
		return x.Heading
	}
	return nil
}

type isBlock_Inner interface {
	isBlock_Inner()
}

type Block_Text struct {
	Text *TextBlock `protobuf:"bytes,2,opt,name=text,proto3,oneof"`
}

type Block_Italics struct {
	Italics *ItalicsBlock `protobuf:"bytes,3,opt,name=italics,proto3,oneof"`
}

type Block_Bold struct {
	Bold *BoldBlock `protobuf:"bytes,4,opt,name=bold,proto3,oneof"`
}

type Block_Underline struct {
	Underline *UnderlineBlock `protobuf:"bytes,5,opt,name=underline,proto3,oneof"`
}

type Block_Strikethrough struct {
	Strikethrough *StrikethroughBlock `protobuf:"bytes,6,opt,name=strikethrough,proto3,oneof"`
}

type Block_InlineCode struct {
	InlineCode *InlineCodeBlock `protobuf:"bytes,7,opt,name=inline_code,json=inlineCode,proto3,oneof"`
}

type Block_FencedCode struct {
	FencedCode *FencedCodeBlock `protobuf:"bytes,8,opt,name=fenced_code,json=fencedCode,proto3,oneof"`
}

type Block_Spoiler struct {
	Spoiler *SpoilerBlock `protobuf:"bytes,9,opt,name=spoiler,proto3,oneof"`
}

type Block_List struct {
	List *ListBlock `protobuf:"bytes,10,opt,name=list,proto3,oneof"`
}

type Block_Link struct {
	Link *LinkBlock `protobuf:"bytes,11,opt,name=link,proto3,oneof"`
}

type Block_Blockquote struct {
	Blockquote *BlockquoteBlock `protobuf:"bytes,12,opt,name=blockquote,proto3,oneof"`
}

type Block_Timestamp struct {
	Timestamp *TimestampBlock `protobuf:"bytes,13,opt,name=timestamp,proto3,oneof"`
}

type Block_Container struct {
	Container *ContainerBlock `protobuf:"bytes,14,opt,name=container,proto3,oneof"`
}

type Block_Heading struct {
	Heading *HeadingBlock `protobuf:"bytes,15,opt,name=heading,proto3,oneof"`
}

func (*Block_Text) isBlock_Inner() {}

func (*Block_Italics) isBlock_Inner() {}

func (*Block_Bold) isBlock_Inner() {}

func (*Block_Underline) isBlock_Inner() {}

func (*Block_Strikethrough) isBlock_Inner() {}

func (*Block_InlineCode) isBlock_Inner() {}

func (*Block_FencedCode) isBlock_Inner() {}

func (*Block_Spoiler) isBlock_Inner() {}

func (*Block_List) isBlock_Inner() {}

func (*Block_Link) isBlock_Inner() {}

func (*Block_Blockquote) isBlock_Inner() {}

func (*Block_Timestamp) isBlock_Inner() {}

func (*Block_Container) isBlock_Inner() {}

func (*Block_Heading) isBlock_Inner() {}

// TextBlock is a simple text block. It does not have any child blocks.
type TextBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *TextBlock) Reset() {
	*x = TextBlock{}
	mi := &file_common_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TextBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TextBlock) ProtoMessage() {}

func (x *TextBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TextBlock.ProtoReflect.Descriptor instead.
func (*TextBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{11}
}

func (x *TextBlock) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// ItalicsBlock is a formatting block, applying the formatting to all blocks
// inside it.
type ItalicsBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []*Block `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ItalicsBlock) Reset() {
	*x = ItalicsBlock{}
	mi := &file_common_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ItalicsBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ItalicsBlock) ProtoMessage() {}

func (x *ItalicsBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ItalicsBlock.ProtoReflect.Descriptor instead.
func (*ItalicsBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{12}
}

func (x *ItalicsBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

// BoldBlock is a formatting block, applying the formatting to all blocks
// inside it.
type BoldBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []*Block `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *BoldBlock) Reset() {
	*x = BoldBlock{}
	mi := &file_common_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BoldBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoldBlock) ProtoMessage() {}

func (x *BoldBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoldBlock.ProtoReflect.Descriptor instead.
func (*BoldBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{13}
}

func (x *BoldBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

// UnderlineBlock is a formatting block, applying the formatting to all blocks
// inside it.
type UnderlineBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []*Block `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *UnderlineBlock) Reset() {
	*x = UnderlineBlock{}
	mi := &file_common_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UnderlineBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnderlineBlock) ProtoMessage() {}

func (x *UnderlineBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnderlineBlock.ProtoReflect.Descriptor instead.
func (*UnderlineBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{14}
}

func (x *UnderlineBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

// StrikethroughBlock is a formatting block, applying the formatting to all blocks
// inside it.
type StrikethroughBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []*Block `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *StrikethroughBlock) Reset() {
	*x = StrikethroughBlock{}
	mi := &file_common_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StrikethroughBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StrikethroughBlock) ProtoMessage() {}

func (x *StrikethroughBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StrikethroughBlock.ProtoReflect.Descriptor instead.
func (*StrikethroughBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{15}
}

func (x *StrikethroughBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

// InlineCodeBlock is a formatting block, applying the formatting to all blocks
// inside it.
type InlineCodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *InlineCodeBlock) Reset() {
	*x = InlineCodeBlock{}
	mi := &file_common_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *InlineCodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InlineCodeBlock) ProtoMessage() {}

func (x *InlineCodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InlineCodeBlock.ProtoReflect.Descriptor instead.
func (*InlineCodeBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{16}
}

func (x *InlineCodeBlock) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// FencedCodeBlock is a formatting block, applying the formatting to all blocks
// inside it.
type FencedCodeBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info string `protobuf:"bytes,1,opt,name=info,proto3" json:"info,omitempty"`
	Text string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *FencedCodeBlock) Reset() {
	*x = FencedCodeBlock{}
	mi := &file_common_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FencedCodeBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FencedCodeBlock) ProtoMessage() {}

func (x *FencedCodeBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FencedCodeBlock.ProtoReflect.Descriptor instead.
func (*FencedCodeBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{17}
}

func (x *FencedCodeBlock) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *FencedCodeBlock) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// SpoilerBlock is a formatting block, applying the formatting to all blocks
// inside it.
type SpoilerBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []*Block `protobuf:"bytes,2,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *SpoilerBlock) Reset() {
	*x = SpoilerBlock{}
	mi := &file_common_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SpoilerBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpoilerBlock) ProtoMessage() {}

func (x *SpoilerBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpoilerBlock.ProtoReflect.Descriptor instead.
func (*SpoilerBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{18}
}

func (x *SpoilerBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

// ListBlock is a container block, signifying that the inner blocks are all list
// items.
type ListBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []*Block `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ListBlock) Reset() {
	*x = ListBlock{}
	mi := &file_common_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBlock) ProtoMessage() {}

func (x *ListBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBlock.ProtoReflect.Descriptor instead.
func (*ListBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{19}
}

func (x *ListBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

// LinkBlock represents a link. The URL is the URL, and the inner blocks are the
// link text.
type LinkBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url   string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Inner []*Block `protobuf:"bytes,2,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *LinkBlock) Reset() {
	*x = LinkBlock{}
	mi := &file_common_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkBlock) ProtoMessage() {}

func (x *LinkBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkBlock.ProtoReflect.Descriptor instead.
func (*LinkBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{20}
}

func (x *LinkBlock) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *LinkBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

// BlockquoteBlock is a container block, signifying that the inner blocks are
// all in a blockquote.
type BlockquoteBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []*Block `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *BlockquoteBlock) Reset() {
	*x = BlockquoteBlock{}
	mi := &file_common_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BlockquoteBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BlockquoteBlock) ProtoMessage() {}

func (x *BlockquoteBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BlockquoteBlock.ProtoReflect.Descriptor instead.
func (*BlockquoteBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{21}
}

func (x *BlockquoteBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

// ContainerBlock is a container block with no formatting, signifying that the
// inner blocks are grouped together, but nothing more. It is useful for
// ListBlocks.
type ContainerBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner []*Block `protobuf:"bytes,1,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *ContainerBlock) Reset() {
	*x = ContainerBlock{}
	mi := &file_common_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ContainerBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContainerBlock) ProtoMessage() {}

func (x *ContainerBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContainerBlock.ProtoReflect.Descriptor instead.
func (*ContainerBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{22}
}

func (x *ContainerBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

// TimestampBlock represents a timestamp. It can be used on platforms which
// support timezone-aware timestamps.
type TimestampBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inner *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=inner,proto3" json:"inner,omitempty"`
}

func (x *TimestampBlock) Reset() {
	*x = TimestampBlock{}
	mi := &file_common_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TimestampBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimestampBlock) ProtoMessage() {}

func (x *TimestampBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimestampBlock.ProtoReflect.Descriptor instead.
func (*TimestampBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{23}
}

func (x *TimestampBlock) GetInner() *timestamppb.Timestamp {
	if x != nil {
		return x.Inner
	}
	return nil
}

// HeadingBlock represents a heading. It is stored along with an arbitrary
// heading level.
type HeadingBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Level int32    `protobuf:"varint,1,opt,name=level,proto3" json:"level,omitempty"`
	Inner []*Block `protobuf:"bytes,2,rep,name=inner,proto3" json:"inner,omitempty"`
}

func (x *HeadingBlock) Reset() {
	*x = HeadingBlock{}
	mi := &file_common_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HeadingBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeadingBlock) ProtoMessage() {}

func (x *HeadingBlock) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeadingBlock.ProtoReflect.Descriptor instead.
func (*HeadingBlock) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{24}
}

func (x *HeadingBlock) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *HeadingBlock) GetInner() []*Block {
	if x != nil {
		return x.Inner
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

var file_common_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x2d, 0x0a, 0x07, 0x42, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x39, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21,
	0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x52, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a, 0x0c,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x50, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x78, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x22, 0x76, 0x0a, 0x13, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x78, 0x0a, 0x0c, 0x4d, 0x65, 0x6e,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x06,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f,
	0x63, 0x6b, 0x73, 0x22, 0x69, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x72, 0x67, 0x22, 0x77,
	0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2d, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x12, 0x25, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0x75, 0x0a, 0x12, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x24, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x06, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x25, 0x0a, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x06, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x73, 0x22, 0xff,
	0x05, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6c, 0x61, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x12, 0x27,
	0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48,
	0x00, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x07, 0x69, 0x74, 0x61, 0x6c, 0x69,
	0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x73, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x07, 0x69, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x04, 0x62, 0x6f, 0x6c,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x42, 0x6f, 0x6c, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x62, 0x6f,
	0x6c, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55,
	0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x09, 0x75, 0x6e, 0x64, 0x65, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x74,
	0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6b,
	0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x12, 0x3a,
	0x0a, 0x0b, 0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x49, 0x6e, 0x6c,
	0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a,
	0x69, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x66, 0x65,
	0x6e, 0x63, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x43,
	0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x6e, 0x63,
	0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x53, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x07, 0x73, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x39, 0x0a, 0x0a, 0x62, 0x6c,
	0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f, 0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x71, 0x75, 0x6f,
	0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x36, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69,
	0x6e, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x48, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x07,
	0x68, 0x65, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x22, 0x1f, 0x0a, 0x09, 0x54, 0x65, 0x78, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x33, 0x0a, 0x0c, 0x49, 0x74, 0x61, 0x6c, 0x69, 0x63, 0x73, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x30, 0x0a, 0x09, 0x42, 0x6f, 0x6c, 0x64, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x35, 0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x65,
	0x72, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22,
	0x39, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6b, 0x65, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x25, 0x0a, 0x0f, 0x49, 0x6e,
	0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x39, 0x0a, 0x0f, 0x46, 0x65, 0x6e, 0x63, 0x65, 0x64, 0x43, 0x6f, 0x64, 0x65, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x33, 0x0a, 0x0c,
	0x53, 0x70, 0x6f, 0x69, 0x6c, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x22, 0x30, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23,
	0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75,
	0x72, 0x6c, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x36, 0x0a, 0x0f, 0x42, 0x6c, 0x6f, 0x63, 0x6b,
	0x71, 0x75, 0x6f, 0x74, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22,
	0x35, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52,
	0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x42, 0x0a, 0x0e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x30, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x49, 0x0a, 0x0c, 0x48, 0x65,
	0x61, 0x64, 0x69, 0x6e, 0x67, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x23, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05,
	0x69, 0x6e, 0x6e, 0x65, 0x72, 0x42, 0x1f, 0x0a, 0x17, 0x69, 0x6f, 0x2e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5a, 0x04, 0x2e, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData = file_common_proto_rawDesc
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_common_proto_rawDescData)
	})
	return file_common_proto_rawDescData
}

var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 25)
var file_common_proto_goTypes = []any{
	(*Backend)(nil),               // 0: common.Backend
	(*User)(nil),                  // 1: common.User
	(*Channel)(nil),               // 2: common.Channel
	(*ChannelSource)(nil),         // 3: common.ChannelSource
	(*MessageEvent)(nil),          // 4: common.MessageEvent
	(*PrivateMessageEvent)(nil),   // 5: common.PrivateMessageEvent
	(*MentionEvent)(nil),          // 6: common.MentionEvent
	(*CommandEvent)(nil),          // 7: common.CommandEvent
	(*ActionEvent)(nil),           // 8: common.ActionEvent
	(*PrivateActionEvent)(nil),    // 9: common.PrivateActionEvent
	(*Block)(nil),                 // 10: common.Block
	(*TextBlock)(nil),             // 11: common.TextBlock
	(*ItalicsBlock)(nil),          // 12: common.ItalicsBlock
	(*BoldBlock)(nil),             // 13: common.BoldBlock
	(*UnderlineBlock)(nil),        // 14: common.UnderlineBlock
	(*StrikethroughBlock)(nil),    // 15: common.StrikethroughBlock
	(*InlineCodeBlock)(nil),       // 16: common.InlineCodeBlock
	(*FencedCodeBlock)(nil),       // 17: common.FencedCodeBlock
	(*SpoilerBlock)(nil),          // 18: common.SpoilerBlock
	(*ListBlock)(nil),             // 19: common.ListBlock
	(*LinkBlock)(nil),             // 20: common.LinkBlock
	(*BlockquoteBlock)(nil),       // 21: common.BlockquoteBlock
	(*ContainerBlock)(nil),        // 22: common.ContainerBlock
	(*TimestampBlock)(nil),        // 23: common.TimestampBlock
	(*HeadingBlock)(nil),          // 24: common.HeadingBlock
	(*timestamppb.Timestamp)(nil), // 25: google.protobuf.Timestamp
}
var file_common_proto_depIdxs = []int32{
	1,  // 0: common.ChannelSource.user:type_name -> common.User
	3,  // 1: common.MessageEvent.source:type_name -> common.ChannelSource
	10, // 2: common.MessageEvent.blocks:type_name -> common.Block
	1,  // 3: common.PrivateMessageEvent.source:type_name -> common.User
	10, // 4: common.PrivateMessageEvent.blocks:type_name -> common.Block
	3,  // 5: common.MentionEvent.source:type_name -> common.ChannelSource
	10, // 6: common.MentionEvent.blocks:type_name -> common.Block
	3,  // 7: common.CommandEvent.source:type_name -> common.ChannelSource
	3,  // 8: common.ActionEvent.source:type_name -> common.ChannelSource
	10, // 9: common.ActionEvent.blocks:type_name -> common.Block
	1,  // 10: common.PrivateActionEvent.source:type_name -> common.User
	10, // 11: common.PrivateActionEvent.blocks:type_name -> common.Block
	11, // 12: common.Block.text:type_name -> common.TextBlock
	12, // 13: common.Block.italics:type_name -> common.ItalicsBlock
	13, // 14: common.Block.bold:type_name -> common.BoldBlock
	14, // 15: common.Block.underline:type_name -> common.UnderlineBlock
	15, // 16: common.Block.strikethrough:type_name -> common.StrikethroughBlock
	16, // 17: common.Block.inline_code:type_name -> common.InlineCodeBlock
	17, // 18: common.Block.fenced_code:type_name -> common.FencedCodeBlock
	18, // 19: common.Block.spoiler:type_name -> common.SpoilerBlock
	19, // 20: common.Block.list:type_name -> common.ListBlock
	20, // 21: common.Block.link:type_name -> common.LinkBlock
	21, // 22: common.Block.blockquote:type_name -> common.BlockquoteBlock
	23, // 23: common.Block.timestamp:type_name -> common.TimestampBlock
	22, // 24: common.Block.container:type_name -> common.ContainerBlock
	24, // 25: common.Block.heading:type_name -> common.HeadingBlock
	10, // 26: common.ItalicsBlock.inner:type_name -> common.Block
	10, // 27: common.BoldBlock.inner:type_name -> common.Block
	10, // 28: common.UnderlineBlock.inner:type_name -> common.Block
	10, // 29: common.StrikethroughBlock.inner:type_name -> common.Block
	10, // 30: common.SpoilerBlock.inner:type_name -> common.Block
	10, // 31: common.ListBlock.inner:type_name -> common.Block
	10, // 32: common.LinkBlock.inner:type_name -> common.Block
	10, // 33: common.BlockquoteBlock.inner:type_name -> common.Block
	10, // 34: common.ContainerBlock.inner:type_name -> common.Block
	25, // 35: common.TimestampBlock.inner:type_name -> google.protobuf.Timestamp
	10, // 36: common.HeadingBlock.inner:type_name -> common.Block
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	file_common_proto_msgTypes[10].OneofWrappers = []any{
		(*Block_Text)(nil),
		(*Block_Italics)(nil),
		(*Block_Bold)(nil),
		(*Block_Underline)(nil),
		(*Block_Strikethrough)(nil),
		(*Block_InlineCode)(nil),
		(*Block_FencedCode)(nil),
		(*Block_Spoiler)(nil),
		(*Block_List)(nil),
		(*Block_Link)(nil),
		(*Block_Blockquote)(nil),
		(*Block_Timestamp)(nil),
		(*Block_Container)(nil),
		(*Block_Heading)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_common_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   25,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_rawDesc = nil
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
