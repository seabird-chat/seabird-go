// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: seabird_chat_ingest.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// PerformActionRequest is often known as /me. Either SuccessChatEvent or
// FailedChatEvent SHOULD be returned in response if possible. The
// PerformActionEvent written to the chat backend's connection MUST NOT also be
// sent to the chat backend's event stream.
type PerformActionChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Text      string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PerformActionChatRequest) Reset() {
	*x = PerformActionChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformActionChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformActionChatRequest) ProtoMessage() {}

func (x *PerformActionChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformActionChatRequest.ProtoReflect.Descriptor instead.
func (*PerformActionChatRequest) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{0}
}

func (x *PerformActionChatRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *PerformActionChatRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// PerformPrivateActionRequest is often known as /me. Either SuccessChatEvent or
// FailedChatEvent SHOULD be returned in response if possible. The
// PerformActionEvent written to the chat backend's connection MUST NOT also be
// sent to the chat backend's event stream.
type PerformPrivateActionChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *PerformPrivateActionChatRequest) Reset() {
	*x = PerformPrivateActionChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformPrivateActionChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformPrivateActionChatRequest) ProtoMessage() {}

func (x *PerformPrivateActionChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformPrivateActionChatRequest.ProtoReflect.Descriptor instead.
func (*PerformPrivateActionChatRequest) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{1}
}

func (x *PerformPrivateActionChatRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *PerformPrivateActionChatRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// SendMessageChatRequest requests for a message to be sent to a given channel.
// Either SuccessChatEvent or FailedChatEvent SHOULD be returned in response if
// possible. The MessageEvent written to the chat backend's connection MUST NOT
// also be sent to the chat backend's event stream.
type SendMessageChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Text      string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SendMessageChatRequest) Reset() {
	*x = SendMessageChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendMessageChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendMessageChatRequest) ProtoMessage() {}

func (x *SendMessageChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendMessageChatRequest.ProtoReflect.Descriptor instead.
func (*SendMessageChatRequest) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{2}
}

func (x *SendMessageChatRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *SendMessageChatRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// SendPrivateMessageChatRequest requests for a message to be sent to a given
// user. Either SuccessChatEvent or FailedChatEvent SHOULD be returned in
// response if possible. The PrivateMessageEvent written to the chat backend's
// connection MUST NOT also be sent to the chat backend's event stream.
type SendPrivateMessageChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Text   string `protobuf:"bytes,2,opt,name=text,proto3" json:"text,omitempty"`
}

func (x *SendPrivateMessageChatRequest) Reset() {
	*x = SendPrivateMessageChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendPrivateMessageChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendPrivateMessageChatRequest) ProtoMessage() {}

func (x *SendPrivateMessageChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendPrivateMessageChatRequest.ProtoReflect.Descriptor instead.
func (*SendPrivateMessageChatRequest) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{3}
}

func (x *SendPrivateMessageChatRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *SendPrivateMessageChatRequest) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

// JoinChannelChatRequest requests for the bot to join a channel with the given
// name. Either JoinChannelEvent or FailedChatEvent SHOULD be returned in
// response if possible.
type JoinChannelChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelName string `protobuf:"bytes,1,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
}

func (x *JoinChannelChatRequest) Reset() {
	*x = JoinChannelChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinChannelChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelChatRequest) ProtoMessage() {}

func (x *JoinChannelChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelChatRequest.ProtoReflect.Descriptor instead.
func (*JoinChannelChatRequest) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{4}
}

func (x *JoinChannelChatRequest) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

// LeaveChannelChatRequest requests for the bot to leave the channel with the
// given ID. Either LeaveChannelEvent or FailedChatEvent SHOULD be returned in
// response if possible.
type LeaveChannelChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *LeaveChannelChatRequest) Reset() {
	*x = LeaveChannelChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveChannelChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChannelChatRequest) ProtoMessage() {}

func (x *LeaveChannelChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChannelChatRequest.ProtoReflect.Descriptor instead.
func (*LeaveChannelChatRequest) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{5}
}

func (x *LeaveChannelChatRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

// UpdateChannelInfoChatRequest requests for a the channel to be updated with the
// given metadata. Either ChangeChannelEvent or FailedChatEvent SHOULD be returned
// in response if possible.
type UpdateChannelInfoChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	Topic     string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *UpdateChannelInfoChatRequest) Reset() {
	*x = UpdateChannelInfoChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateChannelInfoChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateChannelInfoChatRequest) ProtoMessage() {}

func (x *UpdateChannelInfoChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateChannelInfoChatRequest.ProtoReflect.Descriptor instead.
func (*UpdateChannelInfoChatRequest) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{6}
}

func (x *UpdateChannelInfoChatRequest) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *UpdateChannelInfoChatRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// MetadataChatRequest requests metadata about the given backend. seabird-core
// expects the backend to respond with a MetadataChatEvent object.
type MetadataChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MetadataChatRequest) Reset() {
	*x = MetadataChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataChatRequest) ProtoMessage() {}

func (x *MetadataChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataChatRequest.ProtoReflect.Descriptor instead.
func (*MetadataChatRequest) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{7}
}

// Each ChatRequest has an ID (which can be attached to requests coming from
// core) and an inner message type. Having an ID allows us to route an event
// back to the requestor without having the chat backend implement a service.
//
// When a request does not get a response, the action may still happen and be
// sent to the event stream, but the plugin may receive a timed out request.
type ChatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Inner:
	//	*ChatRequest_SendMessage
	//	*ChatRequest_SendPrivateMessage
	//	*ChatRequest_JoinChannel
	//	*ChatRequest_LeaveChannel
	//	*ChatRequest_UpdateChannelInfo
	//	*ChatRequest_PerformAction
	//	*ChatRequest_PerformPrivateAction
	//	*ChatRequest_Metadata
	Inner isChatRequest_Inner `protobuf_oneof:"inner"`
}

func (x *ChatRequest) Reset() {
	*x = ChatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatRequest) ProtoMessage() {}

func (x *ChatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatRequest.ProtoReflect.Descriptor instead.
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{8}
}

func (x *ChatRequest) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ChatRequest) GetInner() isChatRequest_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *ChatRequest) GetSendMessage() *SendMessageChatRequest {
	if x, ok := x.GetInner().(*ChatRequest_SendMessage); ok {
		return x.SendMessage
	}
	return nil
}

func (x *ChatRequest) GetSendPrivateMessage() *SendPrivateMessageChatRequest {
	if x, ok := x.GetInner().(*ChatRequest_SendPrivateMessage); ok {
		return x.SendPrivateMessage
	}
	return nil
}

func (x *ChatRequest) GetJoinChannel() *JoinChannelChatRequest {
	if x, ok := x.GetInner().(*ChatRequest_JoinChannel); ok {
		return x.JoinChannel
	}
	return nil
}

func (x *ChatRequest) GetLeaveChannel() *LeaveChannelChatRequest {
	if x, ok := x.GetInner().(*ChatRequest_LeaveChannel); ok {
		return x.LeaveChannel
	}
	return nil
}

func (x *ChatRequest) GetUpdateChannelInfo() *UpdateChannelInfoChatRequest {
	if x, ok := x.GetInner().(*ChatRequest_UpdateChannelInfo); ok {
		return x.UpdateChannelInfo
	}
	return nil
}

func (x *ChatRequest) GetPerformAction() *PerformActionChatRequest {
	if x, ok := x.GetInner().(*ChatRequest_PerformAction); ok {
		return x.PerformAction
	}
	return nil
}

func (x *ChatRequest) GetPerformPrivateAction() *PerformPrivateActionChatRequest {
	if x, ok := x.GetInner().(*ChatRequest_PerformPrivateAction); ok {
		return x.PerformPrivateAction
	}
	return nil
}

func (x *ChatRequest) GetMetadata() *MetadataChatRequest {
	if x, ok := x.GetInner().(*ChatRequest_Metadata); ok {
		return x.Metadata
	}
	return nil
}

type isChatRequest_Inner interface {
	isChatRequest_Inner()
}

type ChatRequest_SendMessage struct {
	SendMessage *SendMessageChatRequest `protobuf:"bytes,2,opt,name=send_message,json=sendMessage,proto3,oneof"`
}

type ChatRequest_SendPrivateMessage struct {
	SendPrivateMessage *SendPrivateMessageChatRequest `protobuf:"bytes,3,opt,name=send_private_message,json=sendPrivateMessage,proto3,oneof"`
}

type ChatRequest_JoinChannel struct {
	JoinChannel *JoinChannelChatRequest `protobuf:"bytes,4,opt,name=join_channel,json=joinChannel,proto3,oneof"`
}

type ChatRequest_LeaveChannel struct {
	LeaveChannel *LeaveChannelChatRequest `protobuf:"bytes,5,opt,name=leave_channel,json=leaveChannel,proto3,oneof"`
}

type ChatRequest_UpdateChannelInfo struct {
	UpdateChannelInfo *UpdateChannelInfoChatRequest `protobuf:"bytes,6,opt,name=update_channel_info,json=updateChannelInfo,proto3,oneof"`
}

type ChatRequest_PerformAction struct {
	PerformAction *PerformActionChatRequest `protobuf:"bytes,7,opt,name=perform_action,json=performAction,proto3,oneof"`
}

type ChatRequest_PerformPrivateAction struct {
	PerformPrivateAction *PerformPrivateActionChatRequest `protobuf:"bytes,8,opt,name=perform_private_action,json=performPrivateAction,proto3,oneof"`
}

type ChatRequest_Metadata struct {
	Metadata *MetadataChatRequest `protobuf:"bytes,9,opt,name=metadata,proto3,oneof"`
}

func (*ChatRequest_SendMessage) isChatRequest_Inner() {}

func (*ChatRequest_SendPrivateMessage) isChatRequest_Inner() {}

func (*ChatRequest_JoinChannel) isChatRequest_Inner() {}

func (*ChatRequest_LeaveChannel) isChatRequest_Inner() {}

func (*ChatRequest_UpdateChannelInfo) isChatRequest_Inner() {}

func (*ChatRequest_PerformAction) isChatRequest_Inner() {}

func (*ChatRequest_PerformPrivateAction) isChatRequest_Inner() {}

func (*ChatRequest_Metadata) isChatRequest_Inner() {}

// HelloChatEvent MUST be the first event sent by the chat backend. If a
// different event is sent, the connection will be closed. The chat backend MUST
// provide an ID unique between all running instances of this type in the
// backend_info. If the ID is not provided or is not unique, the connection will
// be closed.
//
// Note that all IDs sent by a chat backend will be automatically namespaced by
// core based on the backend. As an example, a backend of type "foo" and an ID
// of "bar" may show up as something like "foo.bar" to plugins.
type HelloChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BackendInfo *Backend `protobuf:"bytes,1,opt,name=backend_info,json=backendInfo,proto3" json:"backend_info,omitempty"`
}

func (x *HelloChatEvent) Reset() {
	*x = HelloChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HelloChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HelloChatEvent) ProtoMessage() {}

func (x *HelloChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HelloChatEvent.ProtoReflect.Descriptor instead.
func (*HelloChatEvent) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{9}
}

func (x *HelloChatEvent) GetBackendInfo() *Backend {
	if x != nil {
		return x.BackendInfo
	}
	return nil
}

// This is a marker event to respond to seabird-core that performing an action
// has succeeded. Note that most requests have explicit associated Events, so
// this should only be used in absence of a matching event.
type SuccessChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SuccessChatEvent) Reset() {
	*x = SuccessChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuccessChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuccessChatEvent) ProtoMessage() {}

func (x *SuccessChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuccessChatEvent.ProtoReflect.Descriptor instead.
func (*SuccessChatEvent) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{10}
}

// This is a marker event to respond to seabird-core that performing an action
// has failed. Failed events do not in any way affect chat backends. They serve
// only to notify plugins of failed actions.
type FailedChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason string `protobuf:"bytes,1,opt,name=reason,proto3" json:"reason,omitempty"`
}

func (x *FailedChatEvent) Reset() {
	*x = FailedChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FailedChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FailedChatEvent) ProtoMessage() {}

func (x *FailedChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FailedChatEvent.ProtoReflect.Descriptor instead.
func (*FailedChatEvent) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{11}
}

func (x *FailedChatEvent) GetReason() string {
	if x != nil {
		return x.Reason
	}
	return ""
}

// JoinChannelEvent will be sent when a user joins a channel. The topic SHOULD
// be included if possible, but it can be sent in a topic update event later.
type JoinChannelChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Topic       string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *JoinChannelChatEvent) Reset() {
	*x = JoinChannelChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinChannelChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinChannelChatEvent) ProtoMessage() {}

func (x *JoinChannelChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinChannelChatEvent.ProtoReflect.Descriptor instead.
func (*JoinChannelChatEvent) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{12}
}

func (x *JoinChannelChatEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *JoinChannelChatEvent) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *JoinChannelChatEvent) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// LeaveChannelEvent will be sent when a user leaves a channel.
type LeaveChannelChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *LeaveChannelChatEvent) Reset() {
	*x = LeaveChannelChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LeaveChannelChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LeaveChannelChatEvent) ProtoMessage() {}

func (x *LeaveChannelChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LeaveChannelChatEvent.ProtoReflect.Descriptor instead.
func (*LeaveChannelChatEvent) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{13}
}

func (x *LeaveChannelChatEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

// ChangeChannelEvent will occur when a channel's display name or topic is
// updated.
type ChangeChannelChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId   string `protobuf:"bytes,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	DisplayName string `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty"`
	Topic       string `protobuf:"bytes,3,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *ChangeChannelChatEvent) Reset() {
	*x = ChangeChannelChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeChannelChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeChannelChatEvent) ProtoMessage() {}

func (x *ChangeChannelChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeChannelChatEvent.ProtoReflect.Descriptor instead.
func (*ChangeChannelChatEvent) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{14}
}

func (x *ChangeChannelChatEvent) GetChannelId() string {
	if x != nil {
		return x.ChannelId
	}
	return ""
}

func (x *ChangeChannelChatEvent) GetDisplayName() string {
	if x != nil {
		return x.DisplayName
	}
	return ""
}

func (x *ChangeChannelChatEvent) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// MetadataChatEvent will be sent in response to a MetadataChatRequest. It
// is not sent directly without a corresponding request from seabird-core.
type MetadataChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values map[string]string `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MetadataChatEvent) Reset() {
	*x = MetadataChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MetadataChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MetadataChatEvent) ProtoMessage() {}

func (x *MetadataChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MetadataChatEvent.ProtoReflect.Descriptor instead.
func (*MetadataChatEvent) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{15}
}

func (x *MetadataChatEvent) GetValues() map[string]string {
	if x != nil {
		return x.Values
	}
	return nil
}

// ChatEvent contains all the different event types a chat backend can emit.
// Note that these are slightly different to the seabird.Event types as channels
// here will not be mapped to UUIDs and some events are only to support the data
// that seabird-core tracks.
//
// HelloChatEvent is the only message type that is required for a chat backend
// to work.
//
// Core may be configured with both time-based and load-based request failure
// mechanisms. It can fail any action and serve that as an error to plugins. If
// an ID is included which has timed out in core or otherwise does not exist, it
// will be ignored.
type ChatEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Types that are assignable to Inner:
	//	*ChatEvent_Hello
	//	*ChatEvent_Success
	//	*ChatEvent_Failed
	//	*ChatEvent_Message
	//	*ChatEvent_PrivateMessage
	//	*ChatEvent_Mention
	//	*ChatEvent_Command
	//	*ChatEvent_Action
	//	*ChatEvent_PrivateAction
	//	*ChatEvent_JoinChannel
	//	*ChatEvent_LeaveChannel
	//	*ChatEvent_ChangeChannel
	//	*ChatEvent_Metadata
	Inner isChatEvent_Inner `protobuf_oneof:"inner"`
}

func (x *ChatEvent) Reset() {
	*x = ChatEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_seabird_chat_ingest_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChatEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChatEvent) ProtoMessage() {}

func (x *ChatEvent) ProtoReflect() protoreflect.Message {
	mi := &file_seabird_chat_ingest_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChatEvent.ProtoReflect.Descriptor instead.
func (*ChatEvent) Descriptor() ([]byte, []int) {
	return file_seabird_chat_ingest_proto_rawDescGZIP(), []int{16}
}

func (x *ChatEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (m *ChatEvent) GetInner() isChatEvent_Inner {
	if m != nil {
		return m.Inner
	}
	return nil
}

func (x *ChatEvent) GetHello() *HelloChatEvent {
	if x, ok := x.GetInner().(*ChatEvent_Hello); ok {
		return x.Hello
	}
	return nil
}

func (x *ChatEvent) GetSuccess() *SuccessChatEvent {
	if x, ok := x.GetInner().(*ChatEvent_Success); ok {
		return x.Success
	}
	return nil
}

func (x *ChatEvent) GetFailed() *FailedChatEvent {
	if x, ok := x.GetInner().(*ChatEvent_Failed); ok {
		return x.Failed
	}
	return nil
}

func (x *ChatEvent) GetMessage() *MessageEvent {
	if x, ok := x.GetInner().(*ChatEvent_Message); ok {
		return x.Message
	}
	return nil
}

func (x *ChatEvent) GetPrivateMessage() *PrivateMessageEvent {
	if x, ok := x.GetInner().(*ChatEvent_PrivateMessage); ok {
		return x.PrivateMessage
	}
	return nil
}

func (x *ChatEvent) GetMention() *MentionEvent {
	if x, ok := x.GetInner().(*ChatEvent_Mention); ok {
		return x.Mention
	}
	return nil
}

func (x *ChatEvent) GetCommand() *CommandEvent {
	if x, ok := x.GetInner().(*ChatEvent_Command); ok {
		return x.Command
	}
	return nil
}

func (x *ChatEvent) GetAction() *ActionEvent {
	if x, ok := x.GetInner().(*ChatEvent_Action); ok {
		return x.Action
	}
	return nil
}

func (x *ChatEvent) GetPrivateAction() *PrivateActionEvent {
	if x, ok := x.GetInner().(*ChatEvent_PrivateAction); ok {
		return x.PrivateAction
	}
	return nil
}

func (x *ChatEvent) GetJoinChannel() *JoinChannelChatEvent {
	if x, ok := x.GetInner().(*ChatEvent_JoinChannel); ok {
		return x.JoinChannel
	}
	return nil
}

func (x *ChatEvent) GetLeaveChannel() *LeaveChannelChatEvent {
	if x, ok := x.GetInner().(*ChatEvent_LeaveChannel); ok {
		return x.LeaveChannel
	}
	return nil
}

func (x *ChatEvent) GetChangeChannel() *ChangeChannelChatEvent {
	if x, ok := x.GetInner().(*ChatEvent_ChangeChannel); ok {
		return x.ChangeChannel
	}
	return nil
}

func (x *ChatEvent) GetMetadata() *MetadataChatEvent {
	if x, ok := x.GetInner().(*ChatEvent_Metadata); ok {
		return x.Metadata
	}
	return nil
}

type isChatEvent_Inner interface {
	isChatEvent_Inner()
}

type ChatEvent_Hello struct {
	// Seabird-internal event types
	Hello *HelloChatEvent `protobuf:"bytes,2,opt,name=hello,proto3,oneof"`
}

type ChatEvent_Success struct {
	Success *SuccessChatEvent `protobuf:"bytes,3,opt,name=success,proto3,oneof"`
}

type ChatEvent_Failed struct {
	Failed *FailedChatEvent `protobuf:"bytes,4,opt,name=failed,proto3,oneof"`
}

type ChatEvent_Message struct {
	// Messages from the service
	Message *MessageEvent `protobuf:"bytes,5,opt,name=message,proto3,oneof"`
}

type ChatEvent_PrivateMessage struct {
	PrivateMessage *PrivateMessageEvent `protobuf:"bytes,6,opt,name=private_message,json=privateMessage,proto3,oneof"`
}

type ChatEvent_Mention struct {
	Mention *MentionEvent `protobuf:"bytes,7,opt,name=mention,proto3,oneof"`
}

type ChatEvent_Command struct {
	Command *CommandEvent `protobuf:"bytes,8,opt,name=command,proto3,oneof"`
}

type ChatEvent_Action struct {
	Action *ActionEvent `protobuf:"bytes,12,opt,name=action,proto3,oneof"`
}

type ChatEvent_PrivateAction struct {
	PrivateAction *PrivateActionEvent `protobuf:"bytes,13,opt,name=private_action,json=privateAction,proto3,oneof"`
}

type ChatEvent_JoinChannel struct {
	// Channel changes
	JoinChannel *JoinChannelChatEvent `protobuf:"bytes,9,opt,name=join_channel,json=joinChannel,proto3,oneof"`
}

type ChatEvent_LeaveChannel struct {
	LeaveChannel *LeaveChannelChatEvent `protobuf:"bytes,10,opt,name=leave_channel,json=leaveChannel,proto3,oneof"`
}

type ChatEvent_ChangeChannel struct {
	ChangeChannel *ChangeChannelChatEvent `protobuf:"bytes,11,opt,name=change_channel,json=changeChannel,proto3,oneof"`
}

type ChatEvent_Metadata struct {
	// Introspection
	Metadata *MetadataChatEvent `protobuf:"bytes,14,opt,name=metadata,proto3,oneof"`
}

func (*ChatEvent_Hello) isChatEvent_Inner() {}

func (*ChatEvent_Success) isChatEvent_Inner() {}

func (*ChatEvent_Failed) isChatEvent_Inner() {}

func (*ChatEvent_Message) isChatEvent_Inner() {}

func (*ChatEvent_PrivateMessage) isChatEvent_Inner() {}

func (*ChatEvent_Mention) isChatEvent_Inner() {}

func (*ChatEvent_Command) isChatEvent_Inner() {}

func (*ChatEvent_Action) isChatEvent_Inner() {}

func (*ChatEvent_PrivateAction) isChatEvent_Inner() {}

func (*ChatEvent_JoinChannel) isChatEvent_Inner() {}

func (*ChatEvent_LeaveChannel) isChatEvent_Inner() {}

func (*ChatEvent_ChangeChannel) isChatEvent_Inner() {}

func (*ChatEvent_Metadata) isChatEvent_Inner() {}

var File_seabird_chat_ingest_proto protoreflect.FileDescriptor

var file_seabird_chat_ingest_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69,
	0x6e, 0x67, 0x65, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x65, 0x61,
	0x62, 0x69, 0x72, 0x64, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x18, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x4e, 0x0a, 0x1f, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78,
	0x74, 0x22, 0x4b, 0x0a, 0x16, 0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x4c,
	0x0a, 0x1d, 0x53, 0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x65, 0x78, 0x74, 0x22, 0x3b, 0x0a, 0x16,
	0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x38, 0x0a, 0x17, 0x4c, 0x65, 0x61,
	0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x22, 0x53, 0x0a, 0x1c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x15, 0x0a, 0x13, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x9a, 0x05, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x44, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e,
	0x53, 0x65, 0x6e, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x68, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5a, 0x0a, 0x14, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x70, 0x72,
	0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x53, 0x65,
	0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x65, 0x6e, 0x64, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x44, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72,
	0x64, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6a, 0x6f, 0x69, 0x6e,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x47, 0x0a, 0x0d, 0x6c, 0x65, 0x61, 0x76, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x12, 0x57, 0x0a, 0x13, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x11, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x70, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x50, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x60, 0x0a, 0x16, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74,
	0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x61, 0x62,
	0x69, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x22, 0x44, 0x0a, 0x0e,
	0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x32,
	0x0a, 0x0c, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x61,
	0x63, 0x6b, 0x65, 0x6e, 0x64, 0x52, 0x0b, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x49, 0x6e,
	0x66, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x22, 0x29, 0x0a, 0x0f, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x22, 0x6e, 0x0a, 0x14, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x22, 0x36, 0x0a, 0x15, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x22, 0x70, 0x0a, 0x16, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x8e, 0x01, 0x0a, 0x11,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x3e, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x73, 0x1a, 0x39, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa1, 0x06, 0x0a,
	0x09, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2f, 0x0a, 0x05, 0x68, 0x65,
	0x6c, 0x6c, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x61, 0x62,
	0x69, 0x72, 0x64, 0x2e, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x05, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x12, 0x35, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73,
	0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x46, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x46, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x76,
	0x61, 0x74, 0x65, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x30, 0x0a, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x4d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x6d, 0x65, 0x6e, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2d, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x06, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0c, 0x6a, 0x6f, 0x69, 0x6e,
	0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0b, 0x6a, 0x6f, 0x69, 0x6e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x45, 0x0a, 0x0d,
	0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x48, 0x0a, 0x0e, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x65,
	0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x38, 0x0a,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x32, 0x4a, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x74, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3c,
	0x0a, 0x0c, 0x49, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x12,
	0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64, 0x2e, 0x43, 0x68, 0x61,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x28, 0x01, 0x30, 0x01, 0x42, 0x24, 0x0a, 0x1c,
	0x69, 0x6f, 0x2e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x2e, 0x73, 0x65, 0x61, 0x62, 0x69, 0x72, 0x64,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x5f, 0x69, 0x6e, 0x67, 0x65, 0x73, 0x74, 0x5a, 0x04, 0x2e, 0x3b,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_seabird_chat_ingest_proto_rawDescOnce sync.Once
	file_seabird_chat_ingest_proto_rawDescData = file_seabird_chat_ingest_proto_rawDesc
)

func file_seabird_chat_ingest_proto_rawDescGZIP() []byte {
	file_seabird_chat_ingest_proto_rawDescOnce.Do(func() {
		file_seabird_chat_ingest_proto_rawDescData = protoimpl.X.CompressGZIP(file_seabird_chat_ingest_proto_rawDescData)
	})
	return file_seabird_chat_ingest_proto_rawDescData
}

var file_seabird_chat_ingest_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_seabird_chat_ingest_proto_goTypes = []interface{}{
	(*PerformActionChatRequest)(nil),        // 0: seabird.PerformActionChatRequest
	(*PerformPrivateActionChatRequest)(nil), // 1: seabird.PerformPrivateActionChatRequest
	(*SendMessageChatRequest)(nil),          // 2: seabird.SendMessageChatRequest
	(*SendPrivateMessageChatRequest)(nil),   // 3: seabird.SendPrivateMessageChatRequest
	(*JoinChannelChatRequest)(nil),          // 4: seabird.JoinChannelChatRequest
	(*LeaveChannelChatRequest)(nil),         // 5: seabird.LeaveChannelChatRequest
	(*UpdateChannelInfoChatRequest)(nil),    // 6: seabird.UpdateChannelInfoChatRequest
	(*MetadataChatRequest)(nil),             // 7: seabird.MetadataChatRequest
	(*ChatRequest)(nil),                     // 8: seabird.ChatRequest
	(*HelloChatEvent)(nil),                  // 9: seabird.HelloChatEvent
	(*SuccessChatEvent)(nil),                // 10: seabird.SuccessChatEvent
	(*FailedChatEvent)(nil),                 // 11: seabird.FailedChatEvent
	(*JoinChannelChatEvent)(nil),            // 12: seabird.JoinChannelChatEvent
	(*LeaveChannelChatEvent)(nil),           // 13: seabird.LeaveChannelChatEvent
	(*ChangeChannelChatEvent)(nil),          // 14: seabird.ChangeChannelChatEvent
	(*MetadataChatEvent)(nil),               // 15: seabird.MetadataChatEvent
	(*ChatEvent)(nil),                       // 16: seabird.ChatEvent
	nil,                                     // 17: seabird.MetadataChatEvent.ValuesEntry
	(*Backend)(nil),                         // 18: common.Backend
	(*MessageEvent)(nil),                    // 19: common.MessageEvent
	(*PrivateMessageEvent)(nil),             // 20: common.PrivateMessageEvent
	(*MentionEvent)(nil),                    // 21: common.MentionEvent
	(*CommandEvent)(nil),                    // 22: common.CommandEvent
	(*ActionEvent)(nil),                     // 23: common.ActionEvent
	(*PrivateActionEvent)(nil),              // 24: common.PrivateActionEvent
}
var file_seabird_chat_ingest_proto_depIdxs = []int32{
	2,  // 0: seabird.ChatRequest.send_message:type_name -> seabird.SendMessageChatRequest
	3,  // 1: seabird.ChatRequest.send_private_message:type_name -> seabird.SendPrivateMessageChatRequest
	4,  // 2: seabird.ChatRequest.join_channel:type_name -> seabird.JoinChannelChatRequest
	5,  // 3: seabird.ChatRequest.leave_channel:type_name -> seabird.LeaveChannelChatRequest
	6,  // 4: seabird.ChatRequest.update_channel_info:type_name -> seabird.UpdateChannelInfoChatRequest
	0,  // 5: seabird.ChatRequest.perform_action:type_name -> seabird.PerformActionChatRequest
	1,  // 6: seabird.ChatRequest.perform_private_action:type_name -> seabird.PerformPrivateActionChatRequest
	7,  // 7: seabird.ChatRequest.metadata:type_name -> seabird.MetadataChatRequest
	18, // 8: seabird.HelloChatEvent.backend_info:type_name -> common.Backend
	17, // 9: seabird.MetadataChatEvent.values:type_name -> seabird.MetadataChatEvent.ValuesEntry
	9,  // 10: seabird.ChatEvent.hello:type_name -> seabird.HelloChatEvent
	10, // 11: seabird.ChatEvent.success:type_name -> seabird.SuccessChatEvent
	11, // 12: seabird.ChatEvent.failed:type_name -> seabird.FailedChatEvent
	19, // 13: seabird.ChatEvent.message:type_name -> common.MessageEvent
	20, // 14: seabird.ChatEvent.private_message:type_name -> common.PrivateMessageEvent
	21, // 15: seabird.ChatEvent.mention:type_name -> common.MentionEvent
	22, // 16: seabird.ChatEvent.command:type_name -> common.CommandEvent
	23, // 17: seabird.ChatEvent.action:type_name -> common.ActionEvent
	24, // 18: seabird.ChatEvent.private_action:type_name -> common.PrivateActionEvent
	12, // 19: seabird.ChatEvent.join_channel:type_name -> seabird.JoinChannelChatEvent
	13, // 20: seabird.ChatEvent.leave_channel:type_name -> seabird.LeaveChannelChatEvent
	14, // 21: seabird.ChatEvent.change_channel:type_name -> seabird.ChangeChannelChatEvent
	15, // 22: seabird.ChatEvent.metadata:type_name -> seabird.MetadataChatEvent
	16, // 23: seabird.ChatIngest.IngestEvents:input_type -> seabird.ChatEvent
	8,  // 24: seabird.ChatIngest.IngestEvents:output_type -> seabird.ChatRequest
	24, // [24:25] is the sub-list for method output_type
	23, // [23:24] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_seabird_chat_ingest_proto_init() }
func file_seabird_chat_ingest_proto_init() {
	if File_seabird_chat_ingest_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_seabird_chat_ingest_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformActionChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PerformPrivateActionChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendMessageChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SendPrivateMessageChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinChannelChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveChannelChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateChannelInfoChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HelloChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuccessChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FailedChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinChannelChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LeaveChannelChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeChannelChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MetadataChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_seabird_chat_ingest_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChatEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_seabird_chat_ingest_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ChatRequest_SendMessage)(nil),
		(*ChatRequest_SendPrivateMessage)(nil),
		(*ChatRequest_JoinChannel)(nil),
		(*ChatRequest_LeaveChannel)(nil),
		(*ChatRequest_UpdateChannelInfo)(nil),
		(*ChatRequest_PerformAction)(nil),
		(*ChatRequest_PerformPrivateAction)(nil),
		(*ChatRequest_Metadata)(nil),
	}
	file_seabird_chat_ingest_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*ChatEvent_Hello)(nil),
		(*ChatEvent_Success)(nil),
		(*ChatEvent_Failed)(nil),
		(*ChatEvent_Message)(nil),
		(*ChatEvent_PrivateMessage)(nil),
		(*ChatEvent_Mention)(nil),
		(*ChatEvent_Command)(nil),
		(*ChatEvent_Action)(nil),
		(*ChatEvent_PrivateAction)(nil),
		(*ChatEvent_JoinChannel)(nil),
		(*ChatEvent_LeaveChannel)(nil),
		(*ChatEvent_ChangeChannel)(nil),
		(*ChatEvent_Metadata)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_seabird_chat_ingest_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_seabird_chat_ingest_proto_goTypes,
		DependencyIndexes: file_seabird_chat_ingest_proto_depIdxs,
		MessageInfos:      file_seabird_chat_ingest_proto_msgTypes,
	}.Build()
	File_seabird_chat_ingest_proto = out.File
	file_seabird_chat_ingest_proto_rawDesc = nil
	file_seabird_chat_ingest_proto_goTypes = nil
	file_seabird_chat_ingest_proto_depIdxs = nil
}
